// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model PlayerThrow {
  id           String   @id @default(cuid())
  tournamentId String
  matchId      String
  leg          Int
  playerId     String
  time         DateTime @default(now())
  score        Int
  darts        Int      @default(3)
  doubles      Int?

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@index([matchId, leg, playerId])
}

model Match {
  id           String  @id @default(cuid())
  round        String
  playerAId    String
  playerAName  String
  playerAImage String
  playerBId    String
  playerBName  String
  playerBImage String
  runTo        Int
  playerALegs  Int     @default(0)
  playerBlegs  Int     @default(0)
  firstPlayer  String?
  tournamentId String?

  throwsList     PlayerThrow[]
  tournament Tournament? @relation(fields: [tournamentId], references: [id], onDelete: SetNull)
}

model Tournament {
  id   String @id @default(cuid())
  name String

  matches Match[]
}
